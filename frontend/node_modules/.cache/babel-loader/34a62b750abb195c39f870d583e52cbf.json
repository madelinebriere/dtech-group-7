{"ast":null,"code":"import _objectSpread from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport classNames from 'classnames';\nimport { useTheme } from '../../';\nimport { mergeDeep } from '../../helpers/merge-deep';\nimport { AvatarGroup } from './AvatarGroup';\nimport { AvatarGroupCounter } from './AvatarGroupCounter';\nvar AvatarComponent = function AvatarComponent(_ref) {\n  var _ref$alt = _ref.alt,\n    alt = _ref$alt === void 0 ? '' : _ref$alt,\n    _ref$bordered = _ref.bordered,\n    bordered = _ref$bordered === void 0 ? false : _ref$bordered,\n    children = _ref.children,\n    className = _ref.className,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'light' : _ref$color,\n    img = _ref.img,\n    _ref$placeholderIniti = _ref.placeholderInitials,\n    placeholderInitials = _ref$placeholderIniti === void 0 ? '' : _ref$placeholderIniti,\n    _ref$rounded = _ref.rounded,\n    rounded = _ref$rounded === void 0 ? false : _ref$rounded,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 'md' : _ref$size,\n    _ref$stacked = _ref.stacked,\n    stacked = _ref$stacked === void 0 ? false : _ref$stacked,\n    status = _ref.status,\n    _ref$statusPosition = _ref.statusPosition,\n    statusPosition = _ref$statusPosition === void 0 ? 'top-left' : _ref$statusPosition,\n    _ref$theme = _ref.theme,\n    customTheme = _ref$theme === void 0 ? {} : _ref$theme,\n    props = _objectWithoutProperties(_ref, [\"alt\", \"bordered\", \"children\", \"className\", \"color\", \"img\", \"placeholderInitials\", \"rounded\", \"size\", \"stacked\", \"status\", \"statusPosition\", \"theme\"]);\n  var theme = mergeDeep(useTheme().theme.avatar, customTheme);\n  var imgClassName = classNames(bordered && theme.root.bordered, bordered && theme.root.color[color], rounded && theme.root.rounded, stacked && theme.root.stacked, theme.root.img.on, theme.root.size[size]);\n  var imgProps = {\n    className: classNames(imgClassName, theme.root.img.on),\n    'data-testid': 'flowbite-avatar-img'\n  };\n  return _jsxs(\"div\", _objectSpread({\n    className: classNames(theme.root.base, className),\n    \"data-testid\": \"flowbite-avatar\"\n  }, props, {\n    children: [_jsxs(\"div\", {\n      className: \"relative\",\n      children: [img ? typeof img === 'string' ? _jsx(\"img\", _objectSpread({\n        alt: alt,\n        src: img\n      }, imgProps)) : img(_objectSpread({\n        alt: alt\n      }, imgProps)) : placeholderInitials ? _jsx(\"div\", {\n        className: classNames(theme.root.img.off, theme.root.initials.base, rounded && theme.root.rounded, stacked && theme.root.stacked, bordered && theme.root.bordered, bordered && theme.root.color[color], theme.root.size[size]),\n        \"data-testid\": \"flowbite-avatar-initials-placeholder\",\n        children: _jsx(\"span\", {\n          className: classNames(theme.root.initials.text),\n          \"data-testid\": \"flowbite-avatar-initials-placeholder-text\",\n          children: placeholderInitials\n        })\n      }) : _jsx(\"div\", {\n        className: classNames(imgClassName, theme.root.img.off),\n        \"data-testid\": \"flowbite-avatar-img\",\n        children: _jsx(\"svg\", {\n          className: theme.root.img.placeholder,\n          fill: \"currentColor\",\n          viewBox: \"0 0 20 20\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: _jsx(\"path\", {\n            fillRule: \"evenodd\",\n            d: \"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\",\n            clipRule: \"evenodd\"\n          })\n        })\n      }), status && _jsx(\"span\", {\n        \"data-testid\": \"flowbite-avatar-status\",\n        className: classNames(theme.root.status.base, theme.root.status[status], theme.root.statusPosition[statusPosition])\n      })]\n    }), children && _jsx(\"div\", {\n      children: children\n    })]\n  }));\n};\nAvatarComponent.displayName = 'Avatar';\nexport var Avatar = Object.assign(AvatarComponent, {\n  Group: AvatarGroup,\n  Counter: AvatarGroupCounter\n});","map":null,"metadata":{},"sourceType":"module"}