{"ast":null,"code":"import _slicedToArray from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useMemo } from 'react';\nimport { theme as defaultTheme } from '../../';\nimport { mergeDeep } from '../../helpers/merge-deep';\nimport { ThemeContext, useTheme, useThemeMode } from './ThemeContext';\nexport var Flowbite = function Flowbite(_ref) {\n  var children = _ref.children,\n    _ref$theme = _ref.theme,\n    theme = _ref$theme === void 0 ? {} : _ref$theme;\n  var _theme$theme = theme.theme,\n    customTheme = _theme$theme === void 0 ? {} : _theme$theme,\n    dark = theme.dark;\n  var _useThemeMode = useThemeMode(),\n    _useThemeMode2 = _slicedToArray(_useThemeMode, 3),\n    mode = _useThemeMode2[0],\n    setMode = _useThemeMode2[1],\n    toggleMode = _useThemeMode2[2];\n  var mergedTheme = mergeDeep(defaultTheme, customTheme);\n  useEffect(function () {\n    if (dark) {\n      setMode('dark');\n      document.documentElement.classList.add('dark');\n    } else {\n      setMode('light');\n      document.documentElement.classList.remove('dark');\n    }\n  }, [dark, setMode]);\n  var themeContextValue = useMemo(function () {\n    return {\n      theme: mergedTheme,\n      mode: mode,\n      toggleMode: toggleMode\n    };\n  }, [mode, toggleMode, mergedTheme]);\n  return _jsx(ThemeContext.Provider, {\n    value: themeContextValue,\n    children: children\n  });\n};\nFlowbite.displayName = 'Flowbite';\nexport { useTheme, useThemeMode };","map":null,"metadata":{},"sourceType":"module"}