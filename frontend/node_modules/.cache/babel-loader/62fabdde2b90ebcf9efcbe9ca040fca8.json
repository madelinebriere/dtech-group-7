{"ast":null,"code":"import _slicedToArray from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport { isClient } from '../../helpers/is-client';\nimport { theme } from '../../theme';\nexport var ThemeContext = createContext({\n  theme: theme\n});\nexport var ThemeProvider = function ThemeProvider(_ref) {\n  var children = _ref.children,\n    value = _ref.value;\n  return _jsx(ThemeContext.Provider, {\n    value: value,\n    children: children\n  });\n};\nexport var useTheme = function useTheme() {\n  return useContext(ThemeContext);\n};\nvar prefersColorScheme = function prefersColorScheme() {\n  if (!isClient()) {\n    return 'light';\n  }\n  return window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n};\nexport var useThemeMode = function useThemeMode() {\n  var onToggleMode = function onToggleMode() {\n    var newMode = mode === 'dark' ? 'light' : 'dark';\n    setModeOnBody(newMode);\n    setMode(newMode);\n  };\n  var setModeOnBody = useCallback(function (mode) {\n    if (!isClient()) {\n      return;\n    }\n    if (mode === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, []);\n  var _useContext = useContext(ThemeContext),\n    initialMode = _useContext.mode,\n    _useContext$toggleMod = _useContext.toggleMode,\n    toggleMode = _useContext$toggleMod === void 0 ? onToggleMode : _useContext$toggleMod;\n  var _useState = useState('light'),\n    _useState2 = _slicedToArray(_useState, 2),\n    mode = _useState2[0],\n    setMode = _useState2[1];\n  useEffect(function () {\n    if (initialMode) {\n      setModeOnBody(initialMode);\n      setMode(initialMode);\n    } else {\n      setMode(prefersColorScheme());\n    }\n  }, [initialMode, setModeOnBody, setMode]);\n  return [mode, setMode, toggleMode];\n};","map":null,"metadata":{},"sourceType":"module"}