{"ast":null,"code":"import _objectSpread from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport classNames from 'classnames';\nimport { useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useTheme } from '../../';\nimport { isClient } from '../../helpers/is-client';\nimport { mergeDeep } from '../../helpers/merge-deep';\nimport { ModalBody } from './ModalBody';\nimport { ModalContext } from './ModalContext';\nimport { ModalFooter } from './ModalFooter';\nimport { ModalHeader } from './ModalHeader';\nvar ModalComponent = function ModalComponent(_ref) {\n  var children = _ref.children,\n    className = _ref.className,\n    _ref$dismissible = _ref.dismissible,\n    dismissible = _ref$dismissible === void 0 ? false : _ref$dismissible,\n    onClose = _ref.onClose,\n    popup = _ref.popup,\n    _ref$position = _ref.position,\n    position = _ref$position === void 0 ? 'center' : _ref$position,\n    root = _ref.root,\n    show = _ref.show,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? '2xl' : _ref$size,\n    _ref$theme = _ref.theme,\n    customTheme = _ref$theme === void 0 ? {} : _ref$theme,\n    props = _objectWithoutProperties(_ref, [\"children\", \"className\", \"dismissible\", \"onClose\", \"popup\", \"position\", \"root\", \"show\", \"size\", \"theme\"]);\n  var theme = mergeDeep(useTheme().theme.modal, customTheme);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    mounted = _useState2[0],\n    setMounted = _useState2[1]; // Declare a ref to store a reference to a div element.\n  var containerRef = useRef(null);\n  useEffect(function () {\n    setMounted(true);\n    return function () {\n      var container = containerRef.current;\n      // If a container exists on unmount, it is removed from the DOM and\n      // garbage collected.\n      if (container) {\n        container.parentNode?.removeChild(container);\n        containerRef.current = null;\n      }\n    };\n  }, []);\n  // Close modal when escape key is pressed\n  useEffect(function () {\n    var handleKeyDown = function handleKeyDown(event) {\n      if (event.key === 'Escape' && onClose) {\n        onClose();\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return function () {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]);\n  if (!mounted) {\n    return null;\n  }\n  // If the current value of the ref is falsy (e.g. null), set it to a new div\n  // element.\n  if (!containerRef.current) {\n    containerRef.current = document.createElement('div');\n  }\n  // If the current value of the ref is not already a child of the root element,\n  // append it or replace its parent.\n  if (isClient() && containerRef.current.parentNode !== root) {\n    root ||= document.body;\n    root.appendChild(containerRef.current);\n    // Prevent scrolling of the root element when the modal is shown\n    root.style.overflow = show ? 'hidden' : '';\n  }\n  var handleOnClick = function handleOnClick(e) {\n    if (dismissible && e.target === e.currentTarget && onClose) {\n      onClose();\n    }\n  };\n  return createPortal(_jsx(ModalContext.Provider, {\n    value: {\n      popup: popup,\n      onClose: onClose\n    },\n    children: _jsx(\"div\", _objectSpread({\n      \"aria-hidden\": !show,\n      \"data-testid\": \"modal\",\n      onClick: handleOnClick,\n      role: \"dialog\",\n      className: classNames(theme.root.base, theme.root.positions[position], show ? theme.root.show.on : theme.root.show.off, className)\n    }, props, {\n      children: _jsx(\"div\", {\n        className: classNames(theme.content.base, theme.root.sizes[size]),\n        children: _jsx(\"div\", {\n          className: theme.content.inner,\n          children: children\n        })\n      })\n    }))\n  }), containerRef.current);\n};\nModalComponent.displayName = 'Modal';\nModalHeader.displayName = 'Modal.Header';\nModalBody.displayName = 'Modal.Body';\nModalFooter.displayName = 'Modal.Footer';\nexport var Modal = Object.assign(ModalComponent, {\n  Header: ModalHeader,\n  Body: ModalBody,\n  Footer: ModalFooter\n});","map":null,"metadata":{},"sourceType":"module"}