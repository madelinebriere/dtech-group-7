{"ast":null,"code":"import _objectSpread from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport classNames from 'classnames';\nimport { forwardRef, useId } from 'react';\nimport { Badge, Tooltip, useTheme } from '../../';\nimport { mergeDeep } from '../../helpers/merge-deep';\nimport { useSidebarContext } from './SidebarContext';\nimport { useSidebarItemContext } from './SidebarItemContext';\nvar ListItem = function ListItem(_ref) {\n  var id = _ref.id,\n    isCollapsed = _ref.isCollapsed,\n    tooltipChildren = _ref.tooltipChildren,\n    wrapperChildren = _ref.children;\n  return _jsx(\"li\", {\n    children: isCollapsed ? _jsx(Tooltip, {\n      content: _jsx(TooltipContent, {\n        id: id,\n        children: tooltipChildren\n      }),\n      placement: \"right\",\n      children: wrapperChildren\n    }) : wrapperChildren\n  });\n};\nvar TooltipContent = function TooltipContent(_ref2) {\n  var id = _ref2.id,\n    children = _ref2.children;\n  return _jsx(Children, {\n    id: id,\n    children: children\n  });\n};\nvar Children = function Children(_ref3) {\n  var id = _ref3.id,\n    children = _ref3.children;\n  var theme = useTheme().theme.sidebar.item;\n  return _jsx(\"span\", {\n    \"data-testid\": \"flowbite-sidebar-item-content\",\n    id: \"flowbite-sidebar-item-\".concat(id),\n    className: classNames(theme.content.base),\n    children: children\n  });\n};\nexport var SidebarItem = forwardRef(function (_ref4, ref) {\n  var isActive = _ref4.active,\n    _ref4$as = _ref4.as,\n    Component = _ref4$as === void 0 ? 'a' : _ref4$as,\n    children = _ref4.children,\n    className = _ref4.className,\n    Icon = _ref4.icon,\n    label = _ref4.label,\n    _ref4$labelColor = _ref4.labelColor,\n    labelColor = _ref4$labelColor === void 0 ? 'info' : _ref4$labelColor,\n    _ref4$theme = _ref4.theme,\n    customTheme = _ref4$theme === void 0 ? {} : _ref4$theme,\n    props = _objectWithoutProperties(_ref4, [\"active\", \"as\", \"children\", \"className\", \"icon\", \"label\", \"labelColor\", \"theme\"]);\n  var id = useId();\n  var _useSidebarContext = useSidebarContext(),\n    isCollapsed = _useSidebarContext.isCollapsed;\n  var _useSidebarItemContex = useSidebarItemContext(),\n    isInsideCollapse = _useSidebarItemContex.isInsideCollapse;\n  var theme = mergeDeep(useTheme().theme.sidebar.item, customTheme);\n  return _jsx(ListItem, {\n    id: id,\n    isCollapsed: isCollapsed,\n    tooltipChildren: children,\n    children: _jsxs(Component, _objectSpread({\n      \"aria-labelledby\": \"flowbite-sidebar-item-\".concat(id),\n      ref: ref,\n      className: classNames(theme.base, isActive && theme.active, !isCollapsed && isInsideCollapse && theme.collapsed?.insideCollapse, className)\n    }, props, {\n      children: [Icon && _jsx(Icon, {\n        \"aria-hidden\": true,\n        \"data-testid\": \"flowbite-sidebar-item-icon\",\n        className: classNames(theme.icon?.base, isActive && theme.icon?.active)\n      }), isCollapsed && !Icon && _jsx(\"span\", {\n        className: theme.collapsed?.noIcon,\n        children: children.charAt(0).toLocaleUpperCase() ?? '?'\n      }), !isCollapsed && _jsx(Children, {\n        id: id,\n        children: children\n      }), !isCollapsed && label && _jsx(Badge, {\n        color: labelColor,\n        \"data-testid\": \"flowbite-sidebar-label\",\n        hidden: isCollapsed,\n        className: theme.label,\n        children: label\n      })]\n    }))\n  });\n});\nSidebarItem.displayName = 'Sidebar.Item';","map":null,"metadata":{},"sourceType":"module"}