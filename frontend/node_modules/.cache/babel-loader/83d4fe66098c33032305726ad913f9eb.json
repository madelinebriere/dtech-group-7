{"ast":null,"code":"import _objectSpread from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport classNames from 'classnames';\nimport { useEffect, useId, useState } from 'react';\nimport { HiChevronDown } from 'react-icons/hi';\nimport { Tooltip, useTheme } from '../../';\nimport { mergeDeep } from '../../helpers/merge-deep';\nimport { useSidebarContext } from './SidebarContext';\nimport { SidebarItemContext } from './SidebarItemContext';\nexport var SidebarCollapse = function SidebarCollapse(_ref) {\n  var children = _ref.children,\n    className = _ref.className,\n    Icon = _ref.icon,\n    label = _ref.label,\n    _ref$open = _ref.open,\n    open = _ref$open === void 0 ? false : _ref$open,\n    _ref$theme = _ref.theme,\n    customTheme = _ref$theme === void 0 ? {} : _ref$theme,\n    props = _objectWithoutProperties(_ref, [\"children\", \"className\", \"icon\", \"label\", \"open\", \"theme\"]);\n  var id = useId();\n  var _useSidebarContext = useSidebarContext(),\n    isCollapsed = _useSidebarContext.isCollapsed;\n  var _useState = useState(open),\n    _useState2 = _slicedToArray(_useState, 2),\n    isOpen = _useState2[0],\n    setOpen = _useState2[1];\n  var theme = mergeDeep(useTheme().theme.sidebar.collapse, customTheme);\n  useEffect(function () {\n    return setOpen(open);\n  }, [open]);\n  var Wrapper = function Wrapper(_ref2) {\n    var children = _ref2.children;\n    return _jsx(\"li\", {\n      children: isCollapsed && !isOpen ? _jsx(Tooltip, {\n        content: label,\n        placement: \"right\",\n        children: children\n      }) : children\n    });\n  };\n  return _jsxs(Wrapper, {\n    children: [_jsxs(\"button\", _objectSpread({\n      id: \"flowbite-sidebar-collapse-\".concat(id),\n      onClick: function onClick() {\n        return setOpen(!isOpen);\n      },\n      title: label,\n      type: \"button\",\n      className: classNames(theme.button, className)\n    }, props, {\n      children: [Icon && _jsx(Icon, {\n        \"aria-hidden\": true,\n        \"data-testid\": \"flowbite-sidebar-collapse-icon\",\n        className: classNames(theme.icon.base, theme.icon.open[isOpen ? 'on' : 'off'])\n      }), isCollapsed ? _jsx(\"span\", {\n        className: \"sr-only\",\n        children: label\n      }) : _jsxs(_Fragment, {\n        children: [_jsx(\"span\", {\n          \"data-testid\": \"flowbite-sidebar-collapse-label\",\n          className: theme.label.base,\n          children: label\n        }), _jsx(HiChevronDown, {\n          \"aria-hidden\": true,\n          className: theme.label.icon\n        })]\n      })]\n    })), _jsx(\"ul\", {\n      \"aria-labelledby\": \"flowbite-sidebar-collapse-\".concat(id),\n      hidden: !isOpen,\n      className: theme.list,\n      children: _jsx(SidebarItemContext.Provider, {\n        value: {\n          isInsideCollapse: true\n        },\n        children: children\n      })\n    })]\n  });\n};\nSidebarCollapse.displayName = 'Sidebar.Collapse';","map":null,"metadata":{},"sourceType":"module"}