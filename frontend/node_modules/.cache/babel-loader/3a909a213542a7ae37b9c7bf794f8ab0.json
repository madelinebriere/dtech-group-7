{"ast":null,"code":"import _objectSpread from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { Children, useCallback, useEffect, useId, useMemo, useRef, useState } from 'react';\nimport { HiOutlineChevronDown, HiOutlineChevronLeft, HiOutlineChevronRight, HiOutlineChevronUp } from 'react-icons/hi';\nimport { Button, useTheme } from '../../';\nimport { Floating } from '../../components/Floating';\nimport { mergeDeep } from '../../helpers/merge-deep';\nimport { DropdownDivider } from './DropdownDivider';\nimport { DropdownHeader } from './DropdownHeader';\nimport { DropdownItem } from './DropdownItem';\nvar icons = {\n  top: HiOutlineChevronUp,\n  right: HiOutlineChevronRight,\n  bottom: HiOutlineChevronDown,\n  left: HiOutlineChevronLeft\n};\nvar DropdownComponent = function DropdownComponent(_ref) {\n  var children = _ref.children,\n    className = _ref.className,\n    _ref$dismissOnClick = _ref.dismissOnClick,\n    dismissOnClick = _ref$dismissOnClick === void 0 ? true : _ref$dismissOnClick,\n    _ref$theme = _ref.theme,\n    customTheme = _ref$theme === void 0 ? {} : _ref$theme,\n    props = _objectWithoutProperties(_ref, [\"children\", \"className\", \"dismissOnClick\", \"theme\"]);\n  var id = useId();\n  var theme = mergeDeep(useTheme().theme.dropdown, customTheme);\n  var theirProps = props;\n  var _theirProps$placement = theirProps.placement,\n    placement = _theirProps$placement === void 0 ? props.inline ? 'bottom-start' : 'bottom' : _theirProps$placement,\n    _theirProps$trigger = theirProps.trigger,\n    trigger = _theirProps$trigger === void 0 ? 'click' : _theirProps$trigger,\n    label = theirProps.label,\n    inline = theirProps.inline,\n    _theirProps$floatingA = theirProps.floatingArrow,\n    floatingArrow = _theirProps$floatingA === void 0 ? false : _theirProps$floatingA,\n    _theirProps$arrowIcon = theirProps.arrowIcon,\n    arrowIcon = _theirProps$arrowIcon === void 0 ? true : _theirProps$arrowIcon,\n    buttonProps = _objectWithoutProperties(theirProps, [\"placement\", \"trigger\", \"label\", \"inline\", \"floatingArrow\", \"arrowIcon\"]);\n  var Icon = useMemo(function () {\n    var _placement$split = placement.split('-'),\n      _placement$split2 = _slicedToArray(_placement$split, 1),\n      p = _placement$split2[0];\n    return icons[p] ?? HiOutlineChevronDown;\n  }, [placement]);\n  var _useState = useState(undefined),\n    _useState2 = _slicedToArray(_useState, 2),\n    closeRequestKey = _useState2[0],\n    setCloseRequestKey = _useState2[1];\n  var _useState3 = useState(undefined),\n    _useState4 = _slicedToArray(_useState3, 2),\n    buttonWidth = _useState4[0],\n    setButtonWidth = _useState4[1]; // Extends DropdownItem's onClick to trigger a close request to the Floating component\n  var attachCloseListener = useCallback(\n  // @ts-ignore TODO: Rewrite Dropdown\n  function (node) {\n    if (!React.isValidElement(node)) return node;\n    if (node.type === DropdownItem) return React.cloneElement(node, {\n      // @ts-ignore TODO: Rewrite Dropdown\n      onClick: function onClick() {\n        node.props.onClick?.();\n        dismissOnClick && setCloseRequestKey(id);\n      }\n    });\n    if (node.props.children && typeof node.props.children === 'object') {\n      return React.cloneElement(node, {\n        // @ts-ignore TODO: Rewrite Dropdown\n        children: Children.map(node.props.children, attachCloseListener)\n      });\n    }\n    return node;\n  }, [dismissOnClick, id]);\n  var content = useMemo(function () {\n    return _jsx(\"ul\", {\n      className: theme.content,\n      children: Children.map(children, attachCloseListener)\n    });\n  }, [attachCloseListener, children, theme.content]);\n  var TriggerWrapper = function TriggerWrapper(_ref2) {\n    var children = _ref2.children,\n      setButtonWidth = _ref2.setButtonWidth;\n    var ref = useRef(null);\n    useEffect(function () {\n      if (ref.current) setButtonWidth?.(ref.current.clientWidth);\n    }, [ref]);\n    return inline ? _jsx(\"button\", {\n      type: \"button\",\n      ref: ref,\n      className: theme.inlineWrapper,\n      children: children\n    }) : _jsx(Button, _objectSpread({\n      type: \"button\",\n      ref: ref\n    }, buttonProps, {\n      children: children\n    }));\n  };\n  return _jsx(Floating, {\n    content: content,\n    style: \"auto\",\n    animation: \"duration-100\",\n    placement: placement,\n    arrow: floatingArrow,\n    trigger: trigger,\n    theme: theme.floating,\n    closeRequestKey: closeRequestKey,\n    className: className,\n    minWidth: buttonWidth,\n    children: _jsxs(TriggerWrapper, {\n      setButtonWidth: setButtonWidth,\n      children: [label, arrowIcon && _jsx(Icon, {\n        className: theme.arrowIcon\n      })]\n    })\n  });\n};\nDropdownComponent.displayName = 'Dropdown';\nDropdownItem.displayName = 'Dropdown.Item';\nDropdownHeader.displayName = 'Dropdown.Header';\nDropdownDivider.displayName = 'Dropdown.Divider';\nexport var Dropdown = Object.assign(DropdownComponent, {\n  Item: DropdownItem,\n  Header: DropdownHeader,\n  Divider: DropdownDivider\n});","map":null,"metadata":{},"sourceType":"module"}