{"ast":null,"code":"import _defineProperty from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { autoUpdate, safePolygon, useClick, useFloating, useFocus, useHover, useInteractions, useRole } from '@floating-ui/react';\nimport classNames from 'classnames';\nimport { useEffect, useRef, useState } from 'react';\nimport { getArrowPlacement, getMiddleware, getPlacement } from '../../helpers/floating';\n/**\n * @see https://floating-ui.com/docs/react-dom-interactions\n */\nexport var Floating = function Floating(_ref) {\n  var _classNames;\n  var _ref$animation = _ref.animation,\n    animation = _ref$animation === void 0 ? 'duration-300' : _ref$animation,\n    _ref$arrow = _ref.arrow,\n    arrow = _ref$arrow === void 0 ? true : _ref$arrow,\n    children = _ref.children,\n    className = _ref.className,\n    closeRequestKey = _ref.closeRequestKey,\n    content = _ref.content,\n    _ref$placement = _ref.placement,\n    placement = _ref$placement === void 0 ? 'top' : _ref$placement,\n    _ref$style = _ref.style,\n    style = _ref$style === void 0 ? 'dark' : _ref$style,\n    theme = _ref.theme,\n    _ref$trigger = _ref.trigger,\n    trigger = _ref$trigger === void 0 ? 'hover' : _ref$trigger,\n    minWidth = _ref.minWidth,\n    props = _objectWithoutProperties(_ref, [\"animation\", \"arrow\", \"children\", \"className\", \"closeRequestKey\", \"content\", \"placement\", \"style\", \"theme\", \"trigger\", \"minWidth\"]);\n  var arrowRef = useRef(null);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    open = _useState2[0],\n    setOpen = _useState2[1];\n  var floatingTooltip = useFloating({\n    middleware: getMiddleware({\n      arrowRef: arrowRef,\n      placement: placement\n    }),\n    onOpenChange: setOpen,\n    open: open,\n    placement: getPlacement({\n      placement: placement\n    })\n  });\n  var context = floatingTooltip.context,\n    _floatingTooltip$midd = floatingTooltip.middlewareData.arrow,\n    _floatingTooltip$midd2 = _floatingTooltip$midd === void 0 ? {} : _floatingTooltip$midd,\n    arrowX = _floatingTooltip$midd2.x,\n    arrowY = _floatingTooltip$midd2.y,\n    refs = floatingTooltip.refs,\n    strategy = floatingTooltip.strategy,\n    update = floatingTooltip.update,\n    x = floatingTooltip.x,\n    y = floatingTooltip.y;\n  var _useInteractions = useInteractions([useClick(context, {\n      enabled: trigger === 'click'\n    }), useFocus(context), useHover(context, {\n      enabled: trigger === 'hover',\n      handleClose: safePolygon()\n    }), useRole(context, {\n      role: 'tooltip'\n    })]),\n    getFloatingProps = _useInteractions.getFloatingProps,\n    getReferenceProps = _useInteractions.getReferenceProps;\n  useEffect(function () {\n    if (refs.reference.current && refs.floating.current && open) {\n      return autoUpdate(refs.reference.current, refs.floating.current, update);\n    }\n  }, [open, refs.floating, refs.reference, update]);\n  useEffect(function () {\n    if (closeRequestKey !== undefined) setOpen(false);\n  }, [closeRequestKey]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"div\", _objectSpread({\n      ref: refs.setReference,\n      className: theme.target,\n      \"data-testid\": \"flowbite-tooltip-target\"\n    }, getReferenceProps(), {\n      children: children\n    })), _jsxs(\"div\", _objectSpread({\n      ref: refs.setFloating,\n      \"data-testid\": \"flowbite-tooltip\"\n    }, getFloatingProps(_objectSpread({\n      className: classNames(theme.base, animation && \"\".concat(theme.animation, \" \").concat(animation), !open && theme.hidden, theme.style[style], className),\n      style: {\n        position: strategy,\n        top: y ?? ' ',\n        left: x ?? ' ',\n        minWidth: minWidth\n      }\n    }, props)), {\n      children: [_jsx(\"div\", {\n        className: theme.content,\n        children: content\n      }), arrow && _jsx(\"div\", {\n        className: classNames(theme.arrow.base, (_classNames = {}, _defineProperty(_classNames, theme.arrow.style.dark, style === 'dark'), _defineProperty(_classNames, theme.arrow.style.light, style === 'light'), _defineProperty(_classNames, theme.arrow.style.auto, style === 'auto'), _classNames)),\n        \"data-testid\": \"flowbite-tooltip-arrow\",\n        ref: arrowRef,\n        style: _defineProperty({\n          top: arrowY ?? ' ',\n          left: arrowX ?? ' ',\n          right: ' ',\n          bottom: ' '\n        }, getArrowPlacement({\n          placement: floatingTooltip.placement\n        }), theme.arrow.placement),\n        children: \"\\xA0\"\n      })]\n    }))]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}