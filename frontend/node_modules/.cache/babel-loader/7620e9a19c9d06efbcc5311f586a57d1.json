{"ast":null,"code":"import _objectSpread from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/yyk/Desktop/frontend-editing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport classNames from 'classnames';\nimport { forwardRef } from 'react';\nimport { Spinner, useTheme } from '../../';\nimport { mergeDeep } from '../../helpers/merge-deep';\nimport ButtonGroup from './ButtonGroup';\nvar ButtonComponent = forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n    className = _ref.className,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'info' : _ref$color,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    fullSized = _ref.fullSized,\n    _ref$isProcessing = _ref.isProcessing,\n    isProcessing = _ref$isProcessing === void 0 ? false : _ref$isProcessing,\n    _ref$processingLabel = _ref.processingLabel,\n    processingLabel = _ref$processingLabel === void 0 ? 'Loading...' : _ref$processingLabel,\n    _ref$processingSpinne = _ref.processingSpinner,\n    SpinnerComponent = _ref$processingSpinne === void 0 ? _jsx(Spinner, {}) : _ref$processingSpinne,\n    gradientDuoTone = _ref.gradientDuoTone,\n    gradientMonochrome = _ref.gradientMonochrome,\n    href = _ref.href,\n    label = _ref.label,\n    _ref$outline = _ref.outline,\n    outline = _ref$outline === void 0 ? false : _ref$outline,\n    _ref$pill = _ref.pill,\n    pill = _ref$pill === void 0 ? false : _ref$pill,\n    _ref$positionInGroup = _ref.positionInGroup,\n    positionInGroup = _ref$positionInGroup === void 0 ? 'none' : _ref$positionInGroup,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 'md' : _ref$size,\n    _ref$theme = _ref.theme,\n    customTheme = _ref$theme === void 0 ? {} : _ref$theme,\n    props = _objectWithoutProperties(_ref, [\"children\", \"className\", \"color\", \"disabled\", \"fullSized\", \"isProcessing\", \"processingLabel\", \"processingSpinner\", \"gradientDuoTone\", \"gradientMonochrome\", \"href\", \"label\", \"outline\", \"pill\", \"positionInGroup\", \"size\", \"theme\"]);\n  var _useTheme$theme = useTheme().theme,\n    groupTheme = _useTheme$theme.buttonGroup,\n    buttonTheme = _useTheme$theme.button;\n  var theme = mergeDeep(buttonTheme, customTheme);\n  var isLink = typeof href !== 'undefined';\n  var Component = isLink ? 'a' : 'button';\n  var theirProps = props;\n  return _jsx(Component, _objectSpread({\n    disabled: disabled,\n    href: href,\n    type: isLink ? undefined : 'button',\n    ref: ref,\n    className: classNames(disabled && theme.disabled, !gradientDuoTone && !gradientMonochrome && theme.color[color], gradientDuoTone && !gradientMonochrome && theme.gradientDuoTone[gradientDuoTone], !gradientDuoTone && gradientMonochrome && theme.gradient[gradientMonochrome], groupTheme.position[positionInGroup], outline && (theme.outline.color[color] ?? theme.outline.color.default), theme.base, theme.pill[pill ? 'on' : 'off'], fullSized && theme.fullSized, className)\n  }, theirProps, {\n    children: _jsx(\"span\", {\n      className: classNames(theme.inner.base, theme.inner.position[positionInGroup], theme.outline[outline ? 'on' : 'off'], theme.outline.pill[outline && pill ? 'on' : 'off'], theme.size[size], outline && !theme.outline.color[color] && theme.inner.outline, isProcessing && theme.isProcessing),\n      children: _jsxs(_Fragment, {\n        children: [isProcessing && _jsx(\"span\", {\n          className: theme.spinnerSlot,\n          children: SpinnerComponent\n        }), typeof children !== 'undefined' ? children : _jsx(\"span\", {\n          \"data-testid\": \"flowbite-button-label\",\n          className: theme.label,\n          children: isProcessing ? processingLabel : label\n        })]\n      })\n    })\n  }));\n});\nButtonComponent.displayName = 'Button';\nexport var Button = Object.assign(ButtonComponent, {\n  Group: ButtonGroup\n});","map":null,"metadata":{},"sourceType":"module"}